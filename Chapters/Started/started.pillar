!! Publishing your first project

In this chapter we explain how you can publish your project on github using Iceberg.
We do not explain concepts like commit, push/pull, merging, or cloning.
We thank Peter Uhnak for his first blog on publishing Pharo code on Github.

As git is distributed versioning system, you need a local clone of the repository. 
This is to this local repository that your changes will be commited to before being pushed to remote repositories.
In general you commit to your local clone, and from there you push to remote repositories like  github or gitlab, or that of your company.
Iceberg will do all the operations and more for you.

!!! For the impatient

If you do not want to read anything, here is the executive summary.

- Create a project on github or any git-based platform.
- Configure Iceberg to use custom ssh keys
- Open Iceberg.
- Add a project (chose clone from ...).
- Optionally, in the cloned repository, create a directory named ==src== on your file system using either the FileList or your command line.
- Open your project and add your packages (It is always good to add a baseline).
- Commit your project.
- Push it to your remote repository.

You are done. Now we can explain calmly.

!!! Iceberg setup 

To be able to commit to your git project, you will need to set up valid credentials in your system.
In case you use SSH (the default way), you will need to make sure those keys are available to your github account and also that the shell adds them for smoother communication with the server. 

In case SSH is not setup (and you will notice as soon as you try to clone a project or commit a change to one), you can add SSH keys by following these steps (on Windows, if you want a nice command line environment, install **http://mingw.org/wiki/msys*): 

!!!! Generating a key pair

To do this, execute the command:
[[[
ssh-keygen -t rsa
]]]

It will generate a private and a public key (on a unix-based installation in the directory ==.ssh==). 
You should copy your ==id_rsa.pub== key to your github account.
Keep the keys in a safe place.

On Windows, you can follow instructions on how to generate your keys at *http://guides.beanstalkapp.com/version-control/git-on-windows.html#installing-ssh-keys*.

!!!! Adding the key to your ssh

In linux, execute in your shell:
[[[
ssh-add ~/.ssh/id_rsa
]]]

In OSX, execute in your shell:
[[[
ssh-add -K ~/.ssh/id_rsa
]]]

For both OSX and linux you can add such lines to your ==.bash_profile== (or the one corresponding to your shell installation such as ==.zshrc==) so they are automatically executed on each new shell session.

!!!! Tell Pharo to use your keys

Go to settings browser, search for "Use custom SSH keys" and enter your data there as shown in Figure *@UseCustom*).

+Use Custom SSH keys settings.>file://figures/useCustom.png|width=75|label=UseCustom+

Alternatively, you can execute the following expressions in your image playground or add them to your Pharo system preference file:

[[[
IceCredentialsProvider useCustomSsh: true.
IceCredentialsProvider sshCredentials
  publicKey: 'path\to\ssh\id_rsa.pub';
  privateKey: 'path\to\ssh\id_rsa'
]]]

@@note ""Pro Tip:"" this can be used too in case you have a non-default key file. You just need to replace ==id_rsa== with your file name.


!!! Create a new project on github

Figure *@onGitHub* shows the creation of a project on Github. 

+Create a new project.>file://figures/onGitHub.png|width=75|label=onGitHub+


!!! Add a new project to Iceberg


The first step is then to add a project to Iceberg:
- Press the '+' button to the right of the Iceberg main window.
- Select the source of your project. In our example, since you did not clone your project yet, choose the github option.

Figure *@Cloning* shows that we are cloning the repository we just created. 
We specify the owner, project, and physical location where the local clone and git working copy will be on your disk.

+Cloning new project.>file://figures/Cloning.png|width=75|label=Cloning+

Iceberg has now added your project to its list of managed projects and cloned an empty repository to your disk. You will see the status of your project, as in figure *@FirstTimeCloned*

Here is a breakdown of what you are seeing:
- MyCoolProjectWithPharo has a star and is green. This usually means that you have changes which haven't been committed yet, but may also happen in unrelated edge cases like this one. Don't worry about this for now.
- The Status of the project is 'No Project Found' and this is more important. This is normal since the project is empty. Iceberg cannot find its metadata. We will fix this soon.

+Just after cloning an empty project.>file://figures/FirstTimeCloned.png|width=75|label=FirstTimeCloned+

!!! [Optional but strongly suggested] Adding a src directory

Some developers like to group all their code in a directory named ==src== and this is a nice practice. 
We strongly suggest that you follow it.
You can go to your filesystem and create one in your repository. 
You can also use the Pharo FileList Browser to do it as shown in Figure *@WithSrc*.

+Adding an src folder to a repository.>file://figures/WithSrc.png|width=75|label=WithSrc+


!!! Repair to the rescue

Iceberg is a smart tool that tries to help you fix the problems you may encounter while working with Git.
As a general principle, each time you get a status with red text (such as "No Project Found" or "Detached Working Copy"), you 
should ask Iceberg to fix it using the ""Repair"" command.

Iceberg cannot solve all situations automatically, but it will propose and explain possible repair actions. 
The actions are ranked from most to least probable.
Each action will explain the situation and the consequence of the proposed action.
It is always a good idea to read them.

Figure *@RepairFirst* shows the "Create project metadata" action and its explanation.

+Create project metadata action and explanation.>file://figures/RepairFirst.png|width=75|label=RepairFirst+

!!! Create project metadata

When you choose to create the project metadata, Iceberg shows you the filesystem of your project as well as the repository format as shown in Figure *@Tonel*.
Tonel is the preferred format for Pharo projects.
It has been designed to be Windows and file system friendly. 
Change it only if you know what you're doing! 

+Showing where the metadata will be saved and the format encodings.>file://figures/Tonel.png|width=75|label=Tonel+

After accepting the project details, Iceberg shows you the files that you will be committing as shown in Figure *@PublishingMetaData*

+Details of metadata commit.>file://figures/PublishingMetaData.png|width=75|label=PublishingMetaData+

Once you have committed the metadata, Iceberg shows you that your project has been repaired but is not loaded as shown in Figure *@SavedMetaData*. This is normal since we haven't added any packages to our project yet. 
Your local repository is ready, so let's do that now.

+The package is clean, metadata are saved, but it is not loaded.>file://figures/SavedMetaData.png|width=75|label=SavedMetaData+

!!! Adding and commiting your package
Once your project contains Iceberg metadata, Iceberg will be able to manage it easily. 
Double click on your project and add a package by pressing the + (Add Package) button as shown by Figure *@WithAPackage*.

+Adding a package to your project.>file://figures/WithAPackage.png|width=75|label=WithAPackage+

Again, Iceberg shows that your package contains changes that are not committed using the green color and the * in front of the package name.

Now you are left with two actions:
- Commit the changes to your local repository using the Commit button. Iceberg will reflect this change by removing the * and the changing the color. 
You can commit several times if needed. 
- Publish your changes from your local directory to your remote repository using the Push button. 

When you push your changes, Iceberg will show you all the commits awaiting publication and will push them to your remote repository as shown in Figure *@Push*. The figure shows the commits we are about to make to add a baseline, which will allow you to easily load your project in other images.


+Publishing your committed changes.>file://figures/push.png|width=75|label=Push+




!!! Defining a BaselineOf

A BaselineOf is a description of a project's architecture.
You will express the dependencies between your packages and other projects so that all the dependent projects are loaded without the user having to understand and bother about them.
A baseline is expressed as a subclass of ==BaselineOf== and packaged in a package named =='BaselineOfXXX'== (where 'XXX' is the name of your project).

So if you have no dependencies, you can have something like this.

[[[
BaselineOf subclass: #BaselineOfMyCoolProjectWithPharo
  ...
  package: 'BaselineOfMyCoolProjectWithPharo'
]]]

[[[
BaselineOfMyCoolProjectWithPharo >> baseline: spec
  <baseline>
  spec
    for: #common
    do: [ spec package: 'BMyCoolProjectWithPharo'.
      spec group: 'default' with: #('FileDialog') ]
]]]

Once you have defined your baseline, you should add it to your project as shown in Figure *@WithBaseline*.
Now, commit it and push your changes to your remote repository.

+With a Baseline.>file://figures/WithBaseline.png|width=75|label=WithBaseline+

The online baseline documentation is available at: *https://github.com/pharo-open-documentation/pharo-wiki/blob/master/General/Baselines.md*.


!!! Loading from an existing repository

If you already have a repository, and you just want to load it into Pharo, there are two ways to go about it.
The first is as we did above. You can select a package and manually load it.

The second makes use of Metacello. 
However, this will only work if you have already created a ==BaselineOf==.
In this case, you can just do:

[[[
Metacello new
  baseline: 'MyCoolFirstProjectWithPharo';
  repository: 'github://Ducasse/MyCoolProjectWithPharo';
  load
]]]

For projects with metadata, like the one we just created, that's it. However, if you are loading a project without metadata, you must add the code subfolder to the end of the repository string i.e. 'github://Ducasse/MyCoolProjectWithPharo/src'.

!!! [Optional] Add a nice .gitignore file

Iceberg automatically manages such files.
[[[
# For Pharo 70 and up
# http://www.pharo.org
# Since Pharo 70 all the community is moving to git.

# image, changes and sources
*.changes
*.sources
*.image

# Pharo Debug log file and launcher metadata
PharoDebug.log
pharo.version
meta-inf.ston

# Since Pharo 70, all local cache files for Monticello package cache, playground, epicea... are under the pharo-local
/pharo-local

# Metacello-github cache
/github-cache
github-*.zip
]]]



!! Empowering your projects

Now that you can save your code on github in a breeze, you can take advantage of services
to automate actions, for example using Travis.

!!! Adding Travis integration

By adding two simple files, you can have the tests of your project automatically run after each commit with travis.
You need to enable travis in your github repository. Check your travis account. 

You should also add the two following files: ==.travis.yml== and ==.smalltalk.ston== in the top level of your 
repository. 

==.travis.yml==

[[[
language: smalltalk
sudo: false
os:
  - linux
smalltalk:
  - Pharo-7.0
]]]

==.smalltalk.ston==
[[[
SmalltalkCISpec {
  #loading : [
    SCIMetacelloLoadSpec {
      #baseline : 'MyCoolProjectWithPharo',
      #directory : src',
      #platforms : [ #pharo ]
    }
  ]
}
]]]

If you’ve done everything right, Travis will pick up the changes and will start testing and building it… and you’re done, congratulations!

!!! On windows
If you want to make sure that your code runs on windows, you should use the Appveyor service and add the appveyor.yml file.

[[[
environment:
  CYG_ROOT: C:\cygwin
  CYG_BASH: C:\cygwin\bin\bash
  CYG_CACHE: C:\cygwin\var\cache\setup
  CYG_EXE: C:\cygwin\setup-x86.exe
  CYG_MIRROR: http://cygwin.mirror.constant.com
  SCI_RUN: /cygdrive/c/smalltalkCI-master/run.sh
  matrix:
    - SMALLTALK: Pharo-6.1
    - SMALLTALK: Pharo-7.0

platform:
  - x86

install:
  - '%CYG_EXE% -dgnqNO -R "%CYG_ROOT%" -s "%CYG_MIRROR%" -l "%CYG_CACHE%" -P unzip'
  - ps: Start-FileDownload "https://github.com/hpi-swa/smalltalkCI/archive/master.zip" "C:\smalltalkCI.zip"
  - 7z x C:\smalltalkCI.zip -oC:\ -y > NULL

build: false

test_script:
  - '%CYG_BASH% -lc "cd $APPVEYOR_BUILD_FOLDER; exec 0</dev/null; $SCI_RUN"'
]]]


!!! Adding badges

With CI happily running, you can add a badge to your readme that will show the current status of your project.
Here is the badge of the Containers-Stack project where we also enabled the coveralls.io test coverage service.

[[[
# Containers-Stack
A dead stupid stack implementation, but one fully working :)

[![Build Status](https://travis-ci.com/Ducasse/Containers-Stack.svg?branch=master)]
(https://travis-ci.com/Ducasse/Containers-Stack)
[![Coverage Status](https://coveralls.io/repos/github//Ducasse/Containers-Stack/badge.svg?branch=master)]
(https://coveralls.io/github//Ducasse/Containers-Stack?branch=master)
[![License](https://img.shields.io/badge/license-MIT-blue.svg)]()
[![Pharo version](https://img.shields.io/badge/Pharo-7.0-%23aac9ff.svg)]
(https://pharo.org/download)
[![Pharo version](https://img.shields.io/badge/Pharo-8.0-%23aac9ff.svg)]
(https://pharo.org/download)

## Installation
The following script installs Containers-Stack in Pharo.

```smalltalk
Metacello new
  baseline: 'ContainersStack';
  repository: 'github://Ducasse/Containers-Stack/src';
  load.
```
]]]


To obtain the necessary link, click on the badge in your Travis project overview and select one of the options. You can insert the markdown code directly into your README.md.

!! Understanding the architecture

!!! Glimpse at the architecture

As git is distributed versioning, you will need a local clone of your repository.
You commit to your local clone, and from there you push to remote repositories like github.

Figure *@architecture* shows the architecture of the system. 

- You have your code in the Pharo image.
- Pharo is acting as a working copy (it contains the contents of the git local repository).
- Iceberg manages the publication of your code to the git working copy and the git local repository.
- Iceberg manages the publication of your code to remote repositories.
- Iceberg manages the resynchronisation of your image with the git local repository, git remote repositories and the git working copy.

+Create a new project.>file://figures/architecture.png|width=75|label=architecture+



!! Update your Pharo fork with the official repository

The Pharo Project is also in Github. You can contribute with Pharo Project fixing some issues and doing a Pull Request in the official repository. You can see the issues on Pharo Github repository: github.com/pharo-project/pharo/issues. To be able to do this, you need a fork of Pharo repository. 

You don't need update your fork often. But sometimes, you would like to update your fork with the oficial Pharo repository and you can do this very easy using Iceberg or using the command line. This chapter you will learn how to update a ==Branch== in you repository. If you want to update all your repository, just repeate this procedure to all the branches.


!!! For the impatient

If you do not want to read anything, you can follow only the images. There is one to each click you do.

!!! Update your Pharo fork using Iceberg in 3 steps

This procedure has 3 steps: 

# Create a new image and sincronize your remote repository
# Synchronize your local repository with official Pharo repository
# Push the updated data to your remote repository 

!!!! Step 1 – Create a new image and sincronize your remote repository

Create a new Pharo Image and open Iceberg. The status of pharo repository should be ==Local repository missing==. We need to repair it. Go to ""Repair repository"" and chose ""Clone again this repository"". 
Enter the informations of your fork (your Github username/pharo) and select HTTPS, as shown in Figures *@RepairRepository*, *@CloneAgain* and *@CloneGithub*.

+Repair Repository.>file://figures/PharoFork_RepairRepository.png|width=75|label=RepairRepository+
+Clone Again.>file://figures/PharoFork_CloneAgain.png|width=75|label=CloneAgain+
+Clone Github.>file://figures/PharoFork_CloneGithub.png|width=75|label=CloneGithub+

If the error in Figure *@* happens, just ignore it, ""close all"" windows and open Iceberg again.

+Error.>file://figures/PharoFork_Error.png|width=75|label=Error+

The status of your image can be ""Uncommited changes"" or ""Fetch required"". Follow the option a or b:

- a) In the first case, if the status of your image go to ""Uncommited changes"", as shown in Figure *@PharoFork_FetchUncommited*, you need to do a ""Fetch"" to download your repository data and sincronize it with your local image and go to ""Step 2"".

+Fetch Uncommited.>file://figures/PharoFork_FetchUncommited.png|width=75|label=FetchUncommited+

- b) In this second case, ""Fetch required"", as shown in Figure *@FetchRequired*,do a ""Fetch"" in the repository and follow the next steps.

+Fetch Required.>file://figures/PharoFork_FetchRequired.png|width=75|label=FetchRequired+

Now the new status of your image is ""Detached Working Copy"" as show in Figure *@Detached*. To fix it, go to ""Repair repository"", select ""Discard image changes"", select this option to do checkout ""DO NOT CHECKOUT any packages"" and press ""Checkout"" button, as show in Figures *@DiscardImage* and *@DoNotCheckout*. 

+Detached.>file://figures/PharoFork_Detached.png|width=75|label=Detached+
+Discard Image.>file://figures/PharoFork_DiscardImage.png|width=75|label=DiscardImage+
+Do Not Checkout.>file://figures/PharoFork_DoNotCheckout.png|width=75|label=DoNotCheckout+

!!!! Step 2 – Synchronize your local repository with official Pharo repository

Now you need to create a ""New branch"", because we need to delete our local branch to load it from the official repository, as Figure *@CheckoutBranch* and *@NewBranchTemporary*.

+Checkout Branch.>file://figures/PharoFork_CheckoutBranch.png|width=75|label=CheckoutBranch+
+New Branch Temporary.>file://figures/PharoFork_NewBranchTemporary.png|width=75|label=NewBranchTemporary+


Now we are going to delete the local branch. Select ""Repository"", select in local ""Branches"" the branch that you want to update and than delete it. In this case ""Pharo8.0"", as show in Figure *@SelectRepository* and *@DeleteBranch*.

+Select Repository.>file://figures/PharoFork_SelectRepository.png|width=75|label=SelectRepository+
+Delete Branch.>file://figures/PharoFork_DeleteBranch.png|width=75|label=DeleteBranch+

Now you can do ""Checkout branch"" in the remote branch. Go to ""Remotes/pharo-project"" and select ""Checkout branch"" in ""Pharo8.0"" as show in Figure *@CheckoutRemoteBranch*.

+Checkout Remote Branch.>file://figures/PharoFork_CheckoutRemoteBranch.png|width=75|label=CheckoutRemoteBranch+

Be sure you are selected this option to do checkout ""DO NOT CHECKOUT any packages"" as Figure *@DoNotCheckoutRemote*. This means we are going to update only the local repository, without apply the new changes in the current image.

+Do Not Checkout Remote.>file://figures/PharoFork_DoNotCheckoutRemote.png|width=75|label=DoNotCheckoutRemote+

!!!! Step 3 – Push the updated data to your remote repository 

Select ""Push"" as Figure *@*.

+Push.>file://figures/PharoFork_Push.png|width=75|label=Push+

Be sure you are selecting your repository to Push in it. Enter your Github login and now you have your Github repository updated with the official Github Pharo Project Repository, as Figure *@PushYourRemote*.

+Push Your Remote.>file://figures/PharoFork_PushYourRemote.png|width=75|label=PushYourRemote+

The status of repository in Iceberg is ""Uncommited changes"", but you don't need commit it. Your Github repository already is update as show in Figures *@FinalIcebergStatus* and *@FinalGithubStatus*. 

+Final Iceberg Status.>file://figures/PharoFork_FinalIcebergStatus.png|width=75|label=FinalIcebergStatus+
+Final Github Status.>file://figures/PharoFork_FinalGithubStatus.png|width=75|label=FinalGithubStatus+

!!! Update your Pharo fork using command line

You can also update your Pharo fork using command line in 6 commands. You need to have a git command line installed:

# $ git clone https://github.com/YOUR-USER-NAME/pharo.git
# $ cd Pharo
# $ git remote add pharo https://github.com/pharo-project/pharo.git 
# $ git fetch pharo
# $ git pull pharo Pharo8.0
# $ git push origin Pharo8.0

You can see the results in Figure *@CommandLine*.

+Command Line.>file://figures/PharoFork_CommandLine.png|width=75|label=CommandLine+