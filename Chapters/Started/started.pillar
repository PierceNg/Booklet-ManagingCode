!! Publishing your first project

In this chapter we explain how you can publish your project on github using Iceberg.
We do not explain concepts like commit, push/pull, merging, or cloning.
We thanks Peter Uhnak for his first blog on publishing Pharo code on Github.

!!! For the crazy fools

If you do not want to read anything, here is the executive summary.

- Create a project on github or any git-based platform.
- Open Iceberg.
- Add a project (chose clone from ...).
- Optionally, in the clone repository, create a directory named =='src'== on your file system using either the FileList or your command line.
- Open your project and add your packages (It is always good to add a baseline).
- Commit your project.
- Push it to your remote repository.

You are done. Now we can explain calmly

!!! Iceberg setup 

To be able to be commit to your git project, you will need to set a valid set of credentials in your system.
In case you use SSH (the default way), you will need to make sure those keys are available to your github account and also that the shell add them for the smoother communication with the server. 

In case they are not (and you will notice as soon as you try to clone a project or commit a change into one), you can add them following this steps:
On windows if you want a nice command line environment, install **http://mingw.org/wiki/msys*

!!!! Generating a key pair

To do this execute the command:
[[[
ssh-keygen -t rsa
]]]

It will generate a private and a public key (on unix-based installation in the directory ==.ssh==). 
You should copy your ==id_rsa.pub== key to your github account.
Keep the keys in a safe place.

On Windows, you can follow instructions on how to generate your keys as explained at *http://guides.beanstalkapp.com/version-control/git-on-windows.html#installing-ssh-keys*.

!!!! Adding the key to your ssh

In linux, execute in your shell:
[[[
ssh-add ~/.ssh/id_rsa
]]]

In OSX, execute in your shell:
[[[
ssh-add -K ~/.ssh/id_rsa
]]]

Both for OSX and linux you can add such lines in your ==.bash_profile== (or the one corresponding to your shell installation such as ==.zshrc==) so they are automatically executed on each new shell session.

!!!! Tell Pharo to use your keys

You need to go to settings browser, search for "Use custom SSH keys" and complete your data there as shown in Figure *@UseCustom*).


+Use Custom SSH keys settings.>file://figures/useCustom.png|width=75|label=UseCustom+


Alternatively, you can execute in your image playground or add to your Pharo system preference file the following expressions:

[[[
IceCredentialsProvider useCustomSsh: true.
IceCredentialsProvider sshCredentials
	publicKey: 'path\to\ssh\id_rsa.pub';
	privateKey: 'path\to\ssh\id_rsa'
]]]

Tip: this can be used too in case you have a non default key file, you just need to replace ==id_rsa== with your file name.


!!! Create a new project

Figure *@onGitHub* shows the creation of a project. 

+Create a new project.>file://figures/onGitHub.png|width=75|label=onGitHub+





!!! Add the project to Iceberg
As git is distributed versioning system, you need a local clone of the repository. This is to this local repository that your changes will be commited to before being pushed to remote repositories.
In general you commit to your local clone, and from there you push to github or other places.

The first step is then to add a project to Iceberg.
- Press the '+' button available on the right of the Iceberg main window.
- Then select from which source you want to get your the project. Since you did not clone your project yet, choose the github choice. 

Figure *@Cloning* shows that we are cloning the repository we just created. 
We specify the owner, the project, and the physical location where the local clone and git working copy will be on your disc.

+Cloning new project.>file://figures/Cloning.png|width=75|label=Cloning+

Once done, Iceberg has added your project to its list of managed projects and cloned an empty repository to your disc as shown by Figure *@FirstTimeCloned* shows the status of the project

We explain it now:
- MyCoolProjectWithPharo has a star and is green because the system thinks that some changes were not commited. It may happens because of packages in your image in strange state. You should not really bother for now.
- The Status of the project is 'No Project Found' and this is more important. This is normal since the project is empty, Iceberg cannot find its metadata. We will fix this soon.

+Just after cloning an empty project.>file://figures/FirstTimeCloned.png|width=75|label=FirstTimeCloned+

!!! [Optional] Adding a src directory

Some developers like to group all their code in a directory ==src== and this is a nice practice. 
You can go to your filesystem and create a repository. 
You can also use the Pharo FileList Browser to do it as shown in Figure *@WithSrc*.

+Adding an src folder.>file://figures/WithSrc.png|width=75|label=WithSrc+


!!!! Repair to the rescue

Iceberg is a smart tool that tries to help you fixing the problems you may encounter while working with Git.
As a general principal each time you get a status with a red status (such as No Project Found, or Detached Working Copy), you 
should ask Iceberg to fix it using the ""Repair"" item.

Iceberg cannot solve all the situations automatically but it will propose and explain you possible repair actions. 
The actions are ranked from the most probable to the least one.
Each action will explain you the situation and the consequence of the action.
It is always clever to read them.

Figure *@RepairFirst* shows the action Create project meta-data and its explanation.

+Create project meta-data action and explanation.>file://figures/RepairFirst.png|width=75|label=RepairFirst+

!!! Create project meta-data


+Tonel.>file://figures/Tonel.png|width=75|label=Tonel+


+PublishingMetaData.>file://figures/PublishingMetaData.png|width=75|label=PublishingMetaData+


!!! [Optional] Add a nice .gitignore file

Iceberg manages automatically such files.
[[[
# For Pharo 70 and up
# http://www.pharo.org
# Since Pharo 70 all the community is moving to git.

# image, changes and sources
*.changes
*.sources
*.image

# Pharo Debug log file and launcher metadata
PharoDebug.log
pharo.version
meta-inf.ston

# Since Pharo 70, all local cache files for Monticello package cache, playground, epicea... are under the pharo-local
/pharo-local

# Metacello-github cache
/github-cache
github-*.zip
]]]


!!! Defining a BaselineOf

A BaselineOf is description of the architecture of your project. 
You will express the dependencies between packages and other projects. 
It is expressed as a subclass of ==BaselineOf== and packaged in a package named 'BaselineOfXXX'.

So if you have no dependencies, you can have something like this.

[[[
BaselineOf subclass: #BaselineOfMyCoolProjectWithPharo
	...
	package: 'BaselineOfMyCoolProjectWithPharo'
]]]

[[[
BaselineOfMyCoolProjectWithPharo >> baseline: spec
	<baseline>
	spec
		for: #common
		do: [ spec package: 'BMyCoolProjectWithPharo'.
			spec group: 'default' with: #('FileDialog') ]
]]]



!!! Glimpse at the architecture

As git is distributed versioning, you will need a local clone of the repository.
You commit to your local clone, and from there you push to github or other places.

Figure *@architecture* shows the architecture of the system. 

- You have your code in the Pharo image.
- Pharo is acting as a working copy (it contains the contents of the git local repository).
- Iceberg manages the publication of your code into the git working copy and the git local repository.
- Iceberg manages the publication of your code to remote repositories.
- Iceberg manages the resynchronisation of your image with the git local repository, git remote repositories and the git working copy.

+Create a new project.>file://figures/architecture.png|width=75|label=architecture+

