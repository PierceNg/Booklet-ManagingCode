!! Contributing to Pharo

Pharo itself is hosted on GitHub under *http://www.github.com/pharo-project/*. All the development of the core system is done via 
this code repository. 
You can contribute to Pharo itself fixing some issues.
The official and unique way of submitting code is by doing a ''Pull Request'' from your fork to the official repository.
You can see the issues on the Pharo Github repository: *http://www.github.com/pharo-project/pharo/issues*. 

Should be based on: 
	https://github.com/pharo-project/pharo/wiki/Contribute-a-fix-to-Pharo
	
!!! In a nutshell

The general process is summarised by the following steps:

# Download the latest version (this is important since I will make sure that you do not have to resync your fork).
# Use repair (it will fetch some commits and make sure that your local repository is in sync the remotes).
# Use repair (and create a branch let us called Bottom-123 that will point to the commits of your image).
# Create a new branch for the issue you want to work on.
# Code, then commit, then push to YOUR fork
# Issue a PullRequest from your fork to Pharo
# Check out your Bottom-123 branch and you can restart step 5


!!! Step 0: Setting up the development environment

Download and launch latest Pharo version:

The recommended way to download Pharo is to use the Pharo launcher, which you can get from Pharo download's page. Otherwise, if you have a nice command line environment (wget, readline, bash), download latest development pharo using zeroconf.

@@note Pro tip: If you're on windows and you want a nice command line environment, install msys

[[[
wget -O- get.pharo.org/64/90+vm | bash
./pharo-ui Pharo.image
]]]

If you don't have a command line environment, you can download both image and vm manually from the following links for windows for example:

* Image: http://files.pharo.org/get-files/90/pharo.zip
* VM: http://files.pharo.org/get-files/90/pharo-win-stable.zip
Or you can browse the file server and find the files suiting your environment.

!!! Fork the Pharo repository

All changes you'll do will be versionned in ''your own'' fork of the Pharo repository. Then, from your fork you'll be able to issue pull requests to Pharo, where they will be reviewed, and luckily, integrated.

Go to Pharo github's repository and click on the fork button on the top right. Yes, this means that you'll need a github account to contribute to Pharo, yes.

!!! Setup Iceberg

To be able to contribute to Pharo, you need a Pharo git repository.



You will need to set a valid set of credentials in your system to be able to work with Pharo. In case you use SSH (the default way), you will need to make sure those keys are available but you can start by using HTTPS since this is easier.
 In case they are not (and you will notice as soon as you try to clone a project or commit a change into one), you can add them following this steps:

!!!! Linux setting credentials
Execute in your shell:
[[[
    ssh-add ~/.ssh/id_rsa
]]]

!!!! OSX setting credentials
Execute in your shell:
[[[
    ssh-add -K ~/.ssh/id_rsa
]]]

Both for OSX and linux you can add such lines in your ==.bash_profile== (or the one corresponding to your shell installation) so they are automatically executed on each new shell session.

!!!! Windows setting credentials
in windows is more complicated, you may need to generate a pair of keys (that needs to be uploaded to your account on github).
You can follow instructions on how to generate your keys *http://guides.beanstalkapp.com/version-control/git-on-windows.html#installing-ssh-keys*.


!!!! Pharo side settings

Then you need to go to settings browser, search for "Use custom SSH keys" and complete your data there.

Alternatively, you can execute in your image playground:
[[[
IceCredentialsProvider useCustomSsh: true.
IceCredentialsProvider sshCredentials
	publicKey: 'path\to\ssh\id_rsa.pub';
	privateKey: 'path\to\ssh\id_rsa'
]]]
	
@@note Pro Tip: this can be used too in case you have a non default key file, you just need to replace "id_rsa" with your file name.


!!! Step 1. Setting up your repository

A fresh Pharo image comes with a pre-configured Pharo repository. 
This repository will be in state "Local Repository Missing". 
This means that the image does not find a pharo clone in your disk. 

+A fresh Pharo image by default indicates that it does not find the clone of Pharo. >file://figures/Contribute1-repository-missing.png|width=65|label=repositoryMissing+


!!!! Repairing local repository missing

To solve this situation, you need to rebind your repository with a clone in disk. 
You will be proposed with the repair menu item/button. 

+A Repository Page for a project called ""test"" in GitHub.>file://figures/Contribute2-repositoryRepair.png|width=65|label=repositoryRepair+

!!! Update your Pharo fork using the command line

You can also update your Pharo fork using the command line in 6 commands. You need to have a ==git== command line interface installed:

[[[
$ git clone https://github.com/YOUR-USER-NAME/pharo.git
$ cd Pharo
$ git remote add pharo https://github.com/pharo-project/pharo.git
$ git fetch pharo
$ git pull pharo Pharo8.0
$ git push origin Pharo8.0
]]]

You can see the results in Figure *@CommandLine*.

+Command Line.>file://figures/PharoFork_CommandLine.png|width=75|label=CommandLine+


!!! Conclusion
Now you know how to update a branch from your repository and can happily continue to improve Pharo.
